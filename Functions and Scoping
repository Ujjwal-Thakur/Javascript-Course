//--------------------------------------------------Functions and Scoping----------------->>>>>>>>>>>>>>>>>>>

//This is a void function as it is not returning anything...
function printTheValue(a,b,c){
    let result = (a*10 + b*10 + c*10) / 10;
    console.log(result);
}

printTheValue(1,2,3);           //here output will be 6;
printTheValue();                //Here it will print NaN because no arguments are passed for this function,But the function has 3 parameters.
printTheValue(1,2);             //Here it will print NaN because only 2 argumwnts are passed for the function ,but the function has 3 parameters.

// to solve this problem we set default parameter as:
function printTheValue(a=0,b=0,c=0){
    let result = (a*10 + b*10 + c*10) / 10;
    console.log(result);
}
// //Now even if we take 1 or 2 arguments only it will automatically take another remaining parameters as 0(default);


// here it is not a void function as it is returning a value(in this case it is returning a integer/number value)
function printTheValue(a,b,c){
    let result = (a*10 + b*10 + c*10) / 10;
    return result;
}

//We can also store this function in a variable and use that variable as:
let myfunc = function printTheValue(a,b,c){
    let result = (a*10 + b*10 + c*10) / 10;
    return result;
}
console.log(myfunc(1,2,3));

// it is a void function with some default parameters.
function intro(name= Sample, profession= unemployed, salary= 0){
    console.log(`Hello everyone, My name is ${name}. I am a ${profession}. My income is ${salary}.`)
}

intro('Ujjwal','Student',200000);

// Function to find the sum of an array:
function sumOfArray(arr=[]){
    let sum=0;
    for(let i=0; i<arr.length;i++){
        sum=sum+arr[i];
    }
    return sum;
}
const arr=[1,2,3,4,5];
console.log(sumOfArray(arr));

//Scoping:>>>
//"var" has global scope on the other hand "let" has block scope

let a = 20;
{
    let b = 10;
}
console.log(a);         //It will print 20 because the a is declared outside the parenthesis (globally)(in same level where it is been called)
console.log(b);         //This will throw error as let has block level scope and b is defined inside block but called outside the block

let x=10;
{
    var y=20;
}
console.log(x);
console.log(y);     //Here both x and y will get printed as var has global level scope.

//This is the difference between "var" and "let"

let p=10;
{
    let p=10;
}
//it basically means both the variables are different...
